/* 주석은 이렇게 사용할 수 있다. */
-- 한줄짜리 주석은 -를 두 번 입력해서 사용한다.

-- CRUD (Create-Read-Update-Delete) : 기본적인 데이터 처리 기능 구분
-- 특히 게임에서는 Read가 많이 사용된다.

-- 데이터는 SELECT로 호출, FROM으로 위치를 지정한다. 
-- SELECT ~ FROM이 가장 기본적인 형태이며, 추후 WHERE, GROUPBY 등 여러 조건을 덧붙여 사용하게 된다.
SELECT *
FROM BaseballData.dbo.players

-- 예약어는 대소문자를 구분하지 않는다.
-- 줄바꿈은 어디에 해도 무관하지만, 순서(SELECT -> FROM -> WHERE와 같은)는 중요하다.
-- 세미콜론(;)은 없어도 되지만, 명시적으로 호출 구문이 끝났음을 알릴 때는 세미콜론을 넣는다. (이후의 추가적인 조건은 무시)
SelEct 
* frOm BaseballData.dbo
.players;
-- 다만 여기서는 다른 용어와 구분하기 위해 모두 대문자로 사용하고, SELECT, FROM 등 SQL문 하나 단위로 줄바꿈하기로 한다.

-- SELECT에 key 값을 입력하여 원하는 부분의 값만 가져올 수 있다.
-- 여러 요소를 SELECT할 때는 쉼표를 찍으며 나열하면 된다.
SELECT nameFirst, nameLast, birthYear
FROM BaseballData.dbo.players;

-- AS를 사용하여 특정 key 값을 보기 편한 방식으로 바꿔서 호출할 수 있다.
SELECT nameFirst AS 이름, nameLast AS 성, birthYear AS 출생년도
FROM BaseballData.dbo.players;

-- WHERE로 조건을 지정할 수 있다. 특정 key값이 일치하는 것만 가져올 때는 아래와 같이 작성한다.
-- C++/C# 등과 표기법이 다르다. = 기호는 하나만 쓰며 &&, ||의 경우 AND, OR로 표기한다.
-- 문자열은 작은따옴표로 적는다. 
SELECT nameFirst, nameLast, birthYear, birthCountry
FROM BaseballData.dbo.players
WHERE (birthYear < 1850 OR birthYear = 1900) AND birthCountry != 'USA';

-- NULL값과의 비교는 예외적으로 =, != 대신 IS NULL, IS NOT NULL로 표기한다.
-- NULL은 값이 없음을 뜻하므로 비교도 불가능하기 때문
SELECT nameFirst, nameLast, birthYear, deathYear
FROM BaseballData.dbo.players
WHERE birthYear > 1970 AND deathYear IS NOT NULL;

-- 문자열 패턴 매칭은 LIKE '패턴' 으로 사용한다.
-- _ 기호는 하나당 임의의 문자 하나를 가리키며, % 기호는 길이에 무관하게 임의의 문자열을 의미한다.
-- 아래 조건은 Jo~로 시작하는 3자 또는 4자의 이름을 찾고, 그 중에서 출생도시가 New~로 시작하는 정보만 출력한다.
SELECT nameFirst, nameLast, birthCity
FROM BaseballData.dbo.players
WHERE (nameFirst LIKE 'Jo__' OR nameFirst LIKE 'Jo_') AND birthCity LIKE 'New%'